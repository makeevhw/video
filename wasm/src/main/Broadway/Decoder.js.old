// universal module definition
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.Decoder = factory();
    }
}(this, function () {

    var global;

    function initglobal() {
        global = this;
        if (!global) {
            if (typeof window != "undefined") {
                global = window;
            } else if (typeof self != "undefined") {
                global = self;
            }
            ;
        }
        ;
    };
    initglobal();



    function error(message) {
        console.error(message);
        console.trace();
    };


    function assert(condition, message) {
        if (!condition) {
            error(message);
        }
        ;
    };


    var getModule = function (par_broadwayOnHeadersDecoded, par_broadwayOnPictureDecoded) {


        /*var ModuleX = {
         'print': function(text) { console.log('stdout: ' + text); },
         'printErr': function(text) { console.log('stderr: ' + text); }
         };*/


        /*

         The reason why this is all packed into one file is that this file can also function as worker.
         you can integrate the file into your build system and provide the original file to be loaded into a worker.

         */


        var Module = (function () {

            var Module;
            if (!Module)Module = (typeof Module !== "undefined" ? Module : null) || {};
            var moduleOverrides = {};
            for (var key in Module) {
                if (Module.hasOwnProperty(key)) {
                    moduleOverrides[key] = Module[key]
                }
            }
            var ENVIRONMENT_IS_WEB = typeof window === "object";
            var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
            var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof null === "funfction" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
            var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
            if (ENVIRONMENT_IS_NODE) {
                if (!Module["print"])Module["print"] = function print(x) {
                    process["stdout"].write(x + "\n")
                };
                if (!Module["printErr"])Module["printErr"] = function printErr(x) {
                    process["stderr"].write(x + "\n")
                };
                var nodeFS = (null)("fs");
                var nodePath = (null)("path");
                Module["read"] = function read(filename, binary) {
                    filename = nodePath["normalize"](filename);
                    var ret = nodeFS["readFileSync"](filename);
                    if (!ret && filename != nodePath["resolve"](filename)) {
                        filename = path.join(__dirname, "..", "src", filename);
                        ret = nodeFS["readFileSync"](filename)
                    }
                    if (ret && !binary)ret = ret.toString();
                    return ret
                };
                Module["readBinary"] = function readBinary(filename) {
                    var ret = Module["read"](filename, true);
                    if (!ret.buffer) {
                        ret = new Uint8Array(ret)
                    }
                    assert(ret.buffer);
                    return ret
                };
                Module["load"] = function load(f) {
                    globalEval(read(f))
                };
                if (!Module["thisProgram"]) {
                    if (process["argv"].length > 1) {
                        Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/")
                    } else {
                        Module["thisProgram"] = "unknown-program"
                    }
                }
                Module["arguments"] = process["argv"].slice(2);
                if (typeof module !== "undefined") {
                    module["exports"] = Module
                }
                process["on"]("uncaughtException", (function (ex) {
                    if (!(ex instanceof ExitStatus)) {
                        throw ex
                    }
                }));
                Module["inspect"] = (function () {
                    return "[Emscripten Module object]"
                })
            } else if (ENVIRONMENT_IS_SHELL) {
                if (!Module["print"])Module["print"] = print;
                if (typeof printErr != "undefined")Module["printErr"] = printErr;
                if (typeof read != "undefined") {
                    Module["read"] = read
                } else {
                    Module["read"] = function read() {
                        throw"no read() available (jsc?)"
                    }
                }
                Module["readBinary"] = function readBinary(f) {
                    if (typeof readbuffer === "function") {
                        return new Uint8Array(readbuffer(f))
                    }
                    var data = read(f, "binary");
                    assert(typeof data === "object");
                    return data
                };
                if (typeof scriptArgs != "undefined") {
                    Module["arguments"] = scriptArgs
                } else if (typeof arguments != "undefined") {
                    Module["arguments"] = arguments
                }
            } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
                Module["read"] = function read(url) {
                    var xhr = new XMLHttpRequest;
                    xhr.open("GET", url, false);
                    xhr.send(null);
                    return xhr.responseText
                };
                if (typeof arguments != "undefined") {
                    Module["arguments"] = arguments
                }
                if (typeof console !== "undefined") {
                    if (!Module["print"])Module["print"] = function print(x) {
                        console.log(x)
                    };
                    if (!Module["printErr"])Module["printErr"] = function printErr(x) {
                        console.log(x)
                    }
                } else {
                    var TRY_USE_DUMP = false;
                    if (!Module["print"])Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function (x) {
                        dump(x)
                    }) : (function (x) {
                    })
                }
                if (ENVIRONMENT_IS_WORKER) {
                    Module["load"] = importScripts
                }
                if (typeof Module["setWindowTitle"] === "undefined") {
                    Module["setWindowTitle"] = (function (title) {
                        document.title = title
                    })
                }
            } else {
                throw"Unknown runtime environment. Where are we?"
            }
            function globalEval(x) {
                eval.call(null, x)
            }

            if (!Module["load"] && Module["read"]) {
                Module["load"] = function load(f) {
                    globalEval(Module["read"](f))
                }
            }
            if (!Module["print"]) {
                Module["print"] = (function () {
                })
            }
            if (!Module["printErr"]) {
                Module["printErr"] = Module["print"]
            }
            if (!Module["arguments"]) {
                Module["arguments"] = []
            }
            if (!Module["thisProgram"]) {
                Module["thisProgram"] = "./this.program"
            }
            Module.print = Module["print"];
            Module.printErr = Module["printErr"];
            Module["preRun"] = [];
            Module["postRun"] = [];
            for (var key in moduleOverrides) {
                if (moduleOverrides.hasOwnProperty(key)) {
                    Module[key] = moduleOverrides[key]
                }
            }
            var Runtime = {
                setTempRet0: (function (value) {
                    tempRet0 = value
                }), getTempRet0: (function () {
                    return tempRet0
                }), stackSave: (function () {
                    return STACKTOP
                }), stackRestore: (function (stackTop) {
                    STACKTOP = stackTop
                }), getNativeTypeSize: (function (type) {
                    switch (type) {
                        case"i1":
                        case"i8":
                            return 1;
                        case"i16":
                            return 2;
                        case"i32":
                            return 4;
                        case"i64":
                            return 8;
                        case"float":
                            return 4;
                        case"double":
                            return 8;
                        default: {
                            if (type[type.length - 1] === "*") {
                                return Runtime.QUANTUM_SIZE
                            } else if (type[0] === "i") {
                                var bits = parseInt(type.substr(1));
                                assert(bits % 8 === 0);
                                return bits / 8
                            } else {
                                return 0
                            }
                        }
                    }
                }), getNativeFieldSize: (function (type) {
                    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE)
                }), STACK_ALIGN: 16, prepVararg: (function (ptr, type) {
                    if (type === "double" || type === "i64") {
                        if (ptr & 7) {
                            assert((ptr & 7) === 4);
                            ptr += 4
                        }
                    } else {
                        assert((ptr & 3) === 0)
                    }
                    return ptr
                }), getAlignSize: (function (type, size, vararg) {
                    if (!vararg && (type == "i64" || type == "double"))return 8;
                    if (!type)return Math.min(size, 8);
                    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE)
                }), dynCall: (function (sig, ptr, args) {
                    if (args && args.length) {
                        if (!args.splice)args = Array.prototype.slice.call(args);
                        args.splice(0, 0, ptr);
                        return Module["dynCall_" + sig].apply(null, args)
                    } else {
                        return Module["dynCall_" + sig].call(null, ptr)
                    }
                }), functionPointers: [], addFunction: (function (func) {
                    for (var i = 0; i < Runtime.functionPointers.length; i++) {
                        if (!Runtime.functionPointers[i]) {
                            Runtime.functionPointers[i] = func;
                            return 2 * (1 + i)
                        }
                    }
                    throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."
                }), removeFunction: (function (index) {
                    Runtime.functionPointers[(index - 2) / 2] = null
                }), warnOnce: (function (text) {
                    if (!Runtime.warnOnce.shown)Runtime.warnOnce.shown = {};
                    if (!Runtime.warnOnce.shown[text]) {
                        Runtime.warnOnce.shown[text] = 1;
                        Module.printErr(text)
                    }
                }), funcWrappers: {}, getFuncWrapper: (function (func, sig) {
                    assert(sig);
                    if (!Runtime.funcWrappers[sig]) {
                        Runtime.funcWrappers[sig] = {}
                    }
                    var sigCache = Runtime.funcWrappers[sig];
                    if (!sigCache[func]) {
                        sigCache[func] = function dynCall_wrapper() {
                            return Runtime.dynCall(sig, func, arguments)
                        }
                    }
                    return sigCache[func]
                }), getCompilerSetting: (function (name) {
                    throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"
                }), stackAlloc: (function (size) {
                    var ret = STACKTOP;
                    STACKTOP = STACKTOP + size | 0;
                    STACKTOP = STACKTOP + 15 & -16;
                    return ret
                }), staticAlloc: (function (size) {
                    var ret = STATICTOP;
                    STATICTOP = STATICTOP + size | 0;
                    STATICTOP = STATICTOP + 15 & -16;
                    return ret
                }), dynamicAlloc: (function (size) {
                    var ret = DYNAMICTOP;
                    DYNAMICTOP = DYNAMICTOP + size | 0;
                    DYNAMICTOP = DYNAMICTOP + 15 & -16;
                    if (DYNAMICTOP >= TOTAL_MEMORY) {
                        var success = enlargeMemory();
                        if (!success) {
                            DYNAMICTOP = ret;
                            return 0
                        }
                    }
                    return ret
                }), alignMemory: (function (size, quantum) {
                    var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
                    return ret
                }), makeBigInt: (function (low, high, unsigned) {
                    var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
                    return ret
                }), GLOBAL_BASE: 8, QUANTUM_SIZE: 4, __dummy__: 0
            };
            Module["Runtime"] = Runtime;
            var __THREW__ = 0;
            var ABORT = false;
            var EXITSTATUS = 0;
            var undef = 0;
            var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
            var tempI64, tempI64b;
            var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

            function assert(condition, text) {
                if (!condition) {
                    abort("Assertion failed: " + text)
                }
            }

            var globalScope = this;

            function getCFunc(ident) {
                var func = Module["_" + ident];
                if (!func) {
                    try {
                        func = eval("_" + ident)
                    } catch (e) {
                    }
                }
                assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
                return func
            }

            var cwrap, ccall;
            ((function () {
                var JSfuncs = {
                    "stackSave": (function () {
                        Runtime.stackSave()
                    }), "stackRestore": (function () {
                        Runtime.stackRestore()
                    }), "arrayToC": (function (arr) {
                        var ret = Runtime.stackAlloc(arr.length);
                        writeArrayToMemory(arr, ret);
                        return ret
                    }), "stringToC": (function (str) {
                        var ret = 0;
                        if (str !== null && str !== undefined && str !== 0) {
                            ret = Runtime.stackAlloc((str.length << 2) + 1);
                            writeStringToMemory(str, ret)
                        }
                        return ret
                    })
                };
                var toC = {"string": JSfuncs["stringToC"], "array": JSfuncs["arrayToC"]};
                ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
                    var func = getCFunc(ident);
                    var cArgs = [];
                    var stack = 0;
                    if (args) {
                        for (var i = 0; i < args.length; i++) {
                            var converter = toC[argTypes[i]];
                            if (converter) {
                                if (stack === 0)stack = Runtime.stackSave();
                                cArgs[i] = converter(args[i])
                            } else {
                                cArgs[i] = args[i]
                            }
                        }
                    }
                    var ret = func.apply(null, cArgs);
                    if (returnType === "string")ret = Pointer_stringify(ret);
                    if (stack !== 0) {
                        if (opts && opts.async) {
                            EmterpreterAsync.asyncFinalizers.push((function () {
                                Runtime.stackRestore(stack)
                            }));
                            return
                        }
                        Runtime.stackRestore(stack)
                    }
                    return ret
                };
                var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;

                function parseJSFunc(jsfunc) {
                    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
                    return {arguments: parsed[0], body: parsed[1], returnValue: parsed[2]}
                }

                var JSsource = {};
                for (var fun in JSfuncs) {
                    if (JSfuncs.hasOwnProperty(fun)) {
                        JSsource[fun] = parseJSFunc(JSfuncs[fun])
                    }
                }
                cwrap = function cwrap(ident, returnType, argTypes) {
                    argTypes = argTypes || [];
                    var cfunc = getCFunc(ident);
                    var numericArgs = argTypes.every((function (type) {
                        return type === "number"
                    }));
                    var numericRet = returnType !== "string";
                    if (numericRet && numericArgs) {
                        return cfunc
                    }
                    var argNames = argTypes.map((function (x, i) {
                        return "$" + i
                    }));
                    var funcstr = "(function(" + argNames.join(",") + ") {";
                    var nargs = argTypes.length;
                    if (!numericArgs) {
                        funcstr += "var stack = " + JSsource["stackSave"].body + ";";
                        for (var i = 0; i < nargs; i++) {
                            var arg = argNames[i], type = argTypes[i];
                            if (type === "number")continue;
                            var convertCode = JSsource[type + "ToC"];
                            funcstr += "var " + convertCode.arguments + " = " + arg + ";";
                            funcstr += convertCode.body + ";";
                            funcstr += arg + "=" + convertCode.returnValue + ";"
                        }
                    }
                    var cfuncname = parseJSFunc((function () {
                        return cfunc
                    })).returnValue;
                    funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
                    if (!numericRet) {
                        var strgfy = parseJSFunc((function () {
                            return Pointer_stringify
                        })).returnValue;
                        funcstr += "ret = " + strgfy + "(ret);"
                    }
                    if (!numericArgs) {
                        funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";"
                    }
                    funcstr += "return ret})";
                    return eval(funcstr)
                }
            }))();
            Module["ccall"] = ccall;
            Module["cwrap"] = cwrap;
            function setValue(ptr, value, type, noSafe) {
                type = type || "i8";
                if (type.charAt(type.length - 1) === "*")type = "i32";
                switch (type) {
                    case"i1":
                        HEAP8[ptr >> 0] = value;
                        break;
                    case"i8":
                        HEAP8[ptr >> 0] = value;
                        break;
                    case"i16":
                        HEAP16[ptr >> 1] = value;
                        break;
                    case"i32":
                        HEAP32[ptr >> 2] = value;
                        break;
                    case"i64":
                        tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
                        break;
                    case"float":
                        HEAPF32[ptr >> 2] = value;
                        break;
                    case"double":
                        HEAPF64[ptr >> 3] = value;
                        break;
                    default:
                        abort("invalid type for setValue: " + type)
                }
            }

            Module["setValue"] = setValue;
            function getValue(ptr, type, noSafe) {
                type = type || "i8";
                if (type.charAt(type.length - 1) === "*")type = "i32";
                switch (type) {
                    case"i1":
                        return HEAP8[ptr >> 0];
                    case"i8":
                        return HEAP8[ptr >> 0];
                    case"i16":
                        return HEAP16[ptr >> 1];
                    case"i32":
                        return HEAP32[ptr >> 2];
                    case"i64":
                        return HEAP32[ptr >> 2];
                    case"float":
                        return HEAPF32[ptr >> 2];
                    case"double":
                        return HEAPF64[ptr >> 3];
                    default:
                        abort("invalid type for setValue: " + type)
                }
                return null
            }

            Module["getValue"] = getValue;
            var ALLOC_NORMAL = 0;
            var ALLOC_STACK = 1;
            var ALLOC_STATIC = 2;
            var ALLOC_DYNAMIC = 3;
            var ALLOC_NONE = 4;
            Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
            Module["ALLOC_STACK"] = ALLOC_STACK;
            Module["ALLOC_STATIC"] = ALLOC_STATIC;
            Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
            Module["ALLOC_NONE"] = ALLOC_NONE;
            function allocate(slab, types, allocator, ptr) {
                var zeroinit, size;
                if (typeof slab === "number") {
                    zeroinit = true;
                    size = slab
                } else {
                    zeroinit = false;
                    size = slab.length
                }
                var singleType = typeof types === "string" ? types : null;
                var ret;
                if (allocator == ALLOC_NONE) {
                    ret = ptr
                } else {
                    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length))
                }
                if (zeroinit) {
                    var ptr = ret, stop;
                    assert((ret & 3) == 0);
                    stop = ret + (size & ~3);
                    for (; ptr < stop; ptr += 4) {
                        HEAP32[ptr >> 2] = 0
                    }
                    stop = ret + size;
                    while (ptr < stop) {
                        HEAP8[ptr++ >> 0] = 0
                    }
                    return ret
                }
                if (singleType === "i8") {
                    if (slab.subarray || slab.slice) {
                        HEAPU8.set(slab, ret)
                    } else {
                        HEAPU8.set(new Uint8Array(slab), ret)
                    }
                    return ret
                }
                var i = 0, type, typeSize, previousType;
                while (i < size) {
                    var curr = slab[i];
                    if (typeof curr === "function") {
                        curr = Runtime.getFunctionIndex(curr)
                    }
                    type = singleType || types[i];
                    if (type === 0) {
                        i++;
                        continue
                    }
                    if (type == "i64")type = "i32";
                    setValue(ret + i, curr, type);
                    if (previousType !== type) {
                        typeSize = Runtime.getNativeTypeSize(type);
                        previousType = type
                    }
                    i += typeSize
                }
                return ret
            }

            Module["allocate"] = allocate;
            function getMemory(size) {
                if (!staticSealed)return Runtime.staticAlloc(size);
                if (typeof _sbrk !== "undefined" && !_sbrk.called || !runtimeInitialized)return Runtime.dynamicAlloc(size);
                return _malloc(size)
            }

            Module["getMemory"] = getMemory;
            function Pointer_stringify(ptr, length) {
                if (length === 0 || !ptr)return "";
                var hasUtf = 0;
                var t;
                var i = 0;
                while (1) {
                    t = HEAPU8[ptr + i >> 0];
                    hasUtf |= t;
                    if (t == 0 && !length)break;
                    i++;
                    if (length && i == length)break
                }
                if (!length)length = i;
                var ret = "";
                if (hasUtf < 128) {
                    var MAX_CHUNK = 1024;
                    var curr;
                    while (length > 0) {
                        curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
                        ret = ret ? ret + curr : curr;
                        ptr += MAX_CHUNK;
                        length -= MAX_CHUNK
                    }
                    return ret
                }
                return Module["UTF8ToString"](ptr)
            }

            Module["Pointer_stringify"] = Pointer_stringify;
            function AsciiToString(ptr) {
                var str = "";
                while (1) {
                    var ch = HEAP8[ptr++ >> 0];
                    if (!ch)return str;
                    str += String.fromCharCode(ch)
                }
            }

            Module["AsciiToString"] = AsciiToString;
            function stringToAscii(str, outPtr) {
                return writeAsciiToMemory(str, outPtr, false)
            }

            Module["stringToAscii"] = stringToAscii;
            function UTF8ArrayToString(u8Array, idx) {
                var u0, u1, u2, u3, u4, u5;
                var str = "";
                while (1) {
                    u0 = u8Array[idx++];
                    if (!u0)return str;
                    if (!(u0 & 128)) {
                        str += String.fromCharCode(u0);
                        continue
                    }
                    u1 = u8Array[idx++] & 63;
                    if ((u0 & 224) == 192) {
                        str += String.fromCharCode((u0 & 31) << 6 | u1);
                        continue
                    }
                    u2 = u8Array[idx++] & 63;
                    if ((u0 & 240) == 224) {
                        u0 = (u0 & 15) << 12 | u1 << 6 | u2
                    } else {
                        u3 = u8Array[idx++] & 63;
                        if ((u0 & 248) == 240) {
                            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3
                        } else {
                            u4 = u8Array[idx++] & 63;
                            if ((u0 & 252) == 248) {
                                u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4
                            } else {
                                u5 = u8Array[idx++] & 63;
                                u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5
                            }
                        }
                    }
                    if (u0 < 65536) {
                        str += String.fromCharCode(u0)
                    } else {
                        var ch = u0 - 65536;
                        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)
                    }
                }
            }

            Module["UTF8ArrayToString"] = UTF8ArrayToString;
            function UTF8ToString(ptr) {
                return UTF8ArrayToString(HEAPU8, ptr)
            }

            Module["UTF8ToString"] = UTF8ToString;
            function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
                if (!(maxBytesToWrite > 0))return 0;
                var startIdx = outIdx;
                var endIdx = outIdx + maxBytesToWrite - 1;
                for (var i = 0; i < str.length; ++i) {
                    var u = str.charCodeAt(i);
                    if (u >= 55296 && u <= 57343)u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
                    if (u <= 127) {
                        if (outIdx >= endIdx)break;
                        outU8Array[outIdx++] = u
                    } else if (u <= 2047) {
                        if (outIdx + 1 >= endIdx)break;
                        outU8Array[outIdx++] = 192 | u >> 6;
                        outU8Array[outIdx++] = 128 | u & 63
                    } else if (u <= 65535) {
                        if (outIdx + 2 >= endIdx)break;
                        outU8Array[outIdx++] = 224 | u >> 12;
                        outU8Array[outIdx++] = 128 | u >> 6 & 63;
                        outU8Array[outIdx++] = 128 | u & 63
                    } else if (u <= 2097151) {
                        if (outIdx + 3 >= endIdx)break;
                        outU8Array[outIdx++] = 240 | u >> 18;
                        outU8Array[outIdx++] = 128 | u >> 12 & 63;
                        outU8Array[outIdx++] = 128 | u >> 6 & 63;
                        outU8Array[outIdx++] = 128 | u & 63
                    } else if (u <= 67108863) {
                        if (outIdx + 4 >= endIdx)break;
                        outU8Array[outIdx++] = 248 | u >> 24;
                        outU8Array[outIdx++] = 128 | u >> 18 & 63;
                        outU8Array[outIdx++] = 128 | u >> 12 & 63;
                        outU8Array[outIdx++] = 128 | u >> 6 & 63;
                        outU8Array[outIdx++] = 128 | u & 63
                    } else {
                        if (outIdx + 5 >= endIdx)break;
                        outU8Array[outIdx++] = 252 | u >> 30;
                        outU8Array[outIdx++] = 128 | u >> 24 & 63;
                        outU8Array[outIdx++] = 128 | u >> 18 & 63;
                        outU8Array[outIdx++] = 128 | u >> 12 & 63;
                        outU8Array[outIdx++] = 128 | u >> 6 & 63;
                        outU8Array[outIdx++] = 128 | u & 63
                    }
                }
                outU8Array[outIdx] = 0;
                return outIdx - startIdx
            }

            Module["stringToUTF8Array"] = stringToUTF8Array;
            function stringToUTF8(str, outPtr, maxBytesToWrite) {
                return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite)
            }

            Module["stringToUTF8"] = stringToUTF8;
            function lengthBytesUTF8(str) {
                var len = 0;
                for (var i = 0; i < str.length; ++i) {
                    var u = str.charCodeAt(i);
                    if (u >= 55296 && u <= 57343)u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
                    if (u <= 127) {
                        ++len
                    } else if (u <= 2047) {
                        len += 2
                    } else if (u <= 65535) {
                        len += 3
                    } else if (u <= 2097151) {
                        len += 4
                    } else if (u <= 67108863) {
                        len += 5
                    } else {
                        len += 6
                    }
                }
                return len
            }

            Module["lengthBytesUTF8"] = lengthBytesUTF8;
            function UTF16ToString(ptr) {
                var i = 0;
                var str = "";
                while (1) {
                    var codeUnit = HEAP16[ptr + i * 2 >> 1];
                    if (codeUnit == 0)return str;
                    ++i;
                    str += String.fromCharCode(codeUnit)
                }
            }

            Module["UTF16ToString"] = UTF16ToString;
            function stringToUTF16(str, outPtr, maxBytesToWrite) {
                if (maxBytesToWrite === undefined) {
                    maxBytesToWrite = 2147483647
                }
                if (maxBytesToWrite < 2)return 0;
                maxBytesToWrite -= 2;
                var startPtr = outPtr;
                var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
                for (var i = 0; i < numCharsToWrite; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    HEAP16[outPtr >> 1] = codeUnit;
                    outPtr += 2
                }
                HEAP16[outPtr >> 1] = 0;
                return outPtr - startPtr
            }

            Module["stringToUTF16"] = stringToUTF16;
            function lengthBytesUTF16(str) {
                return str.length * 2
            }

            Module["lengthBytesUTF16"] = lengthBytesUTF16;
            function UTF32ToString(ptr) {
                var i = 0;
                var str = "";
                while (1) {
                    var utf32 = HEAP32[ptr + i * 4 >> 2];
                    if (utf32 == 0)return str;
                    ++i;
                    if (utf32 >= 65536) {
                        var ch = utf32 - 65536;
                        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)
                    } else {
                        str += String.fromCharCode(utf32)
                    }
                }
            }

            Module["UTF32ToString"] = UTF32ToString;
            function stringToUTF32(str, outPtr, maxBytesToWrite) {
                if (maxBytesToWrite === undefined) {
                    maxBytesToWrite = 2147483647
                }
                if (maxBytesToWrite < 4)return 0;
                var startPtr = outPtr;
                var endPtr = startPtr + maxBytesToWrite - 4;
                for (var i = 0; i < str.length; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    if (codeUnit >= 55296 && codeUnit <= 57343) {
                        var trailSurrogate = str.charCodeAt(++i);
                        codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023
                    }
                    HEAP32[outPtr >> 2] = codeUnit;
                    outPtr += 4;
                    if (outPtr + 4 > endPtr)break
                }
                HEAP32[outPtr >> 2] = 0;
                return outPtr - startPtr
            }

            Module["stringToUTF32"] = stringToUTF32;
            function lengthBytesUTF32(str) {
                var len = 0;
                for (var i = 0; i < str.length; ++i) {
                    var codeUnit = str.charCodeAt(i);
                    if (codeUnit >= 55296 && codeUnit <= 57343)++i;
                    len += 4
                }
                return len
            }

            Module["lengthBytesUTF32"] = lengthBytesUTF32;
            function demangle(func) {
                var hasLibcxxabi = !!Module["___cxa_demangle"];
                if (hasLibcxxabi) {
                    try {
                        var buf = _malloc(func.length);
                        writeStringToMemory(func.substr(1), buf);
                        var status = _malloc(4);
                        var ret = Module["___cxa_demangle"](buf, 0, 0, status);
                        if (getValue(status, "i32") === 0 && ret) {
                            return Pointer_stringify(ret)
                        }
                    } catch (e) {
                    } finally {
                        if (buf)_free(buf);
                        if (status)_free(status);
                        if (ret)_free(ret)
                    }
                }
                var i = 3;
                var basicTypes = {
                    "v": "void",
                    "b": "bool",
                    "c": "char",
                    "s": "short",
                    "i": "int",
                    "l": "long",
                    "f": "float",
                    "d": "double",
                    "w": "wchar_t",
                    "a": "signed char",
                    "h": "unsigned char",
                    "t": "unsigned short",
                    "j": "unsigned int",
                    "m": "unsigned long",
                    "x": "long long",
                    "y": "unsigned long long",
                    "z": "..."
                };
                var subs = [];
                var first = true;

                function dump(x) {
                    if (x)Module.print(x);
                    Module.print(func);
                    var pre = "";
                    for (var a = 0; a < i; a++)pre += " ";
                    Module.print(pre + "^")
                }

                function parseNested() {
                    i++;
                    if (func[i] === "K")i++;
                    var parts = [];
                    while (func[i] !== "E") {
                        if (func[i] === "S") {
                            i++;
                            var next = func.indexOf("_", i);
                            var num = func.substring(i, next) || 0;
                            parts.push(subs[num] || "?");
                            i = next + 1;
                            continue
                        }
                        if (func[i] === "C") {
                            parts.push(parts[parts.length - 1]);
                            i += 2;
                            continue
                        }
                        var size = parseInt(func.substr(i));
                        var pre = size.toString().length;
                        if (!size || !pre) {
                            i--;
                            break
                        }
                        var curr = func.substr(i + pre, size);
                        parts.push(curr);
                        subs.push(curr);
                        i += pre + size
                    }
                    i++;
                    return parts
                }

                function parse(rawList, limit, allowVoid) {
                    limit = limit || Infinity;
                    var ret = "", list = [];

                    function flushList() {
                        return "(" + list.join(", ") + ")"
                    }

                    var name;
                    if (func[i] === "N") {
                        name = parseNested().join("::");
                        limit--;
                        if (limit === 0)return rawList ? [name] : name
                    } else {
                        if (func[i] === "K" || first && func[i] === "L")i++;
                        var size = parseInt(func.substr(i));
                        if (size) {
                            var pre = size.toString().length;
                            name = func.substr(i + pre, size);
                            i += pre + size
                        }
                    }
                    first = false;
                    if (func[i] === "I") {
                        i++;
                        var iList = parse(true);
                        var iRet = parse(true, 1, true);
                        ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">"
                    } else {
                        ret = name
                    }
                    paramLoop:while (i < func.length && limit-- > 0) {
                        var c = func[i++];
                        if (c in basicTypes) {
                            list.push(basicTypes[c])
                        } else {
                            switch (c) {
                                case"P":
                                    list.push(parse(true, 1, true)[0] + "*");
                                    break;
                                case"R":
                                    list.push(parse(true, 1, true)[0] + "&");
                                    break;
                                case"L": {
                                    i++;
                                    var end = func.indexOf("E", i);
                                    var size = end - i;
                                    list.push(func.substr(i, size));
                                    i += size + 2;
                                    break
                                }
                                    ;
                                case"A": {
                                    var size = parseInt(func.substr(i));
                                    i += size.toString().length;
                                    if (func[i] !== "_")throw"?";
                                    i++;
                                    list.push(parse(true, 1, true)[0] + " [" + size + "]");
                                    break
                                }
                                    ;
                                case"E":
                                    break paramLoop;
                                default:
                                    ret += "?" + c;
                                    break paramLoop
                            }
                        }
                    }
                    if (!allowVoid && list.length === 1 && list[0] === "void")list = [];
                    if (rawList) {
                        if (ret) {
                            list.push(ret + "?")
                        }
                        return list
                    } else {
                        return ret + flushList()
                    }
                }

                var parsed = func;
                try {
                    if (func == "Object._main" || func == "_main") {
                        return "main()"
                    }
                    if (typeof func === "number")func = Pointer_stringify(func);
                    if (func[0] !== "_")return func;
                    if (func[1] !== "_")return func;
                    if (func[2] !== "Z")return func;
                    switch (func[3]) {
                        case"n":
                            return "operator new()";
                        case"d":
                            return "operator delete()"
                    }
                    parsed = parse()
                } catch (e) {
                    parsed += "?"
                }
                if (parsed.indexOf("?") >= 0 && !hasLibcxxabi) {
                    Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")
                }
                return parsed
            }

            function demangleAll(text) {
                return text.replace(/__Z[\w\d_]+/g, (function (x) {
                    var y = demangle(x);
                    return x === y ? x : x + " [" + y + "]"
                }))
            }

            function jsStackTrace() {
                var err = new Error;
                if (!err.stack) {
                    try {
                        throw new Error(0)
                    } catch (e) {
                        err = e
                    }
                    if (!err.stack) {
                        return "(no stack trace available)"
                    }
                }
                return err.stack.toString()
            }

            function stackTrace() {
                return demangleAll(jsStackTrace())
            }

            Module["stackTrace"] = stackTrace;
            var PAGE_SIZE = 4096;

            function alignMemoryPage(x) {
                if (x % 4096 > 0) {
                    x += 4096 - x % 4096
                }
                return x
            }

            var HEAP;
            var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
            var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
            var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
            var DYNAMIC_BASE = 0, DYNAMICTOP = 0;

            function abortOnCannotGrowMemory() {
                abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")
            }

            function enlargeMemory() {
                abortOnCannotGrowMemory()
            }

            var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
            var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 52428800;
            var totalMemory = 64 * 1024;
            while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
                if (totalMemory < 16 * 1024 * 1024) {
                    totalMemory *= 2
                } else {
                    totalMemory += 16 * 1024 * 1024
                }
            }
            if (totalMemory !== TOTAL_MEMORY) {
                TOTAL_MEMORY = totalMemory
            }
            assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
            var buffer;
            buffer = new ArrayBuffer(TOTAL_MEMORY);
            HEAP8 = new Int8Array(buffer);
            HEAP16 = new Int16Array(buffer);
            HEAP32 = new Int32Array(buffer);
            HEAPU8 = new Uint8Array(buffer);
            HEAPU16 = new Uint16Array(buffer);
            HEAPU32 = new Uint32Array(buffer);
            HEAPF32 = new Float32Array(buffer);
            HEAPF64 = new Float64Array(buffer);
            HEAP32[0] = 255;
            assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
            Module["HEAP"] = HEAP;
            Module["buffer"] = buffer;
            Module["HEAP8"] = HEAP8;
            Module["HEAP16"] = HEAP16;
            Module["HEAP32"] = HEAP32;
            Module["HEAPU8"] = HEAPU8;
            Module["HEAPU16"] = HEAPU16;
            Module["HEAPU32"] = HEAPU32;
            Module["HEAPF32"] = HEAPF32;
            Module["HEAPF64"] = HEAPF64;
            function callRuntimeCallbacks(callbacks) {
                while (callbacks.length > 0) {
                    var callback = callbacks.shift();
                    if (typeof callback == "function") {
                        callback();
                        continue
                    }
                    var func = callback.func;
                    if (typeof func === "number") {
                        if (callback.arg === undefined) {
                            Runtime.dynCall("v", func)
                        } else {
                            Runtime.dynCall("vi", func, [callback.arg])
                        }
                    } else {
                        func(callback.arg === undefined ? null : callback.arg)
                    }
                }
            }

            var __ATPRERUN__ = [];
            var __ATINIT__ = [];
            var __ATMAIN__ = [];
            var __ATEXIT__ = [];
            var __ATPOSTRUN__ = [];
            var runtimeInitialized = false;
            var runtimeExited = false;

            function preRun() {
                if (Module["preRun"]) {
                    if (typeof Module["preRun"] == "function")Module["preRun"] = [Module["preRun"]];
                    while (Module["preRun"].length) {
                        addOnPreRun(Module["preRun"].shift())
                    }
                }
                callRuntimeCallbacks(__ATPRERUN__)
            }

            function ensureInitRuntime() {
                if (runtimeInitialized)return;
                runtimeInitialized = true;
                callRuntimeCallbacks(__ATINIT__)
            }

            function preMain() {
                callRuntimeCallbacks(__ATMAIN__)
            }

            function exitRuntime() {
                callRuntimeCallbacks(__ATEXIT__);
                runtimeExited = true
            }

            function postRun() {
                if (Module["postRun"]) {
                    if (typeof Module["postRun"] == "function")Module["postRun"] = [Module["postRun"]];
                    while (Module["postRun"].length) {
                        addOnPostRun(Module["postRun"].shift())
                    }
                }
                callRuntimeCallbacks(__ATPOSTRUN__)
            }

            function addOnPreRun(cb) {
                __ATPRERUN__.unshift(cb)
            }

            Module["addOnPreRun"] = addOnPreRun;
            function addOnInit(cb) {
                __ATINIT__.unshift(cb)
            }

            Module["addOnInit"] = addOnInit;
            function addOnPreMain(cb) {
                __ATMAIN__.unshift(cb)
            }

            Module["addOnPreMain"] = addOnPreMain;
            function addOnExit(cb) {
                __ATEXIT__.unshift(cb)
            }

            Module["addOnExit"] = addOnExit;
            function addOnPostRun(cb) {
                __ATPOSTRUN__.unshift(cb)
            }

            Module["addOnPostRun"] = addOnPostRun;
            function intArrayFromString(stringy, dontAddNull, length) {
                var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
                var u8array = new Array(len);
                var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
                if (dontAddNull)u8array.length = numBytesWritten;
                return u8array
            }

            Module["intArrayFromString"] = intArrayFromString;
            function intArrayToString(array) {
                var ret = [];
                for (var i = 0; i < array.length; i++) {
                    var chr = array[i];
                    if (chr > 255) {
                        chr &= 255
                    }
                    ret.push(String.fromCharCode(chr))
                }
                return ret.join("")
            }

            Module["intArrayToString"] = intArrayToString;
            function writeStringToMemory(string, buffer, dontAddNull) {
                var array = intArrayFromString(string, dontAddNull);
                var i = 0;
                while (i < array.length) {
                    var chr = array[i];
                    HEAP8[buffer + i >> 0] = chr;
                    i = i + 1
                }
            }

            Module["writeStringToMemory"] = writeStringToMemory;
            function writeArrayToMemory(array, buffer) {
                for (var i = 0; i < array.length; i++) {
                    HEAP8[buffer++ >> 0] = array[i]
                }
            }

            Module["writeArrayToMemory"] = writeArrayToMemory;
            function writeAsciiToMemory(str, buffer, dontAddNull) {
                for (var i = 0; i < str.length; ++i) {
                    HEAP8[buffer++ >> 0] = str.charCodeAt(i)
                }
                if (!dontAddNull)HEAP8[buffer >> 0] = 0
            }

            Module["writeAsciiToMemory"] = writeAsciiToMemory;
            function unSign(value, bits, ignore) {
                if (value >= 0) {
                    return value
                }
                return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value
            }

            function reSign(value, bits, ignore) {
                if (value <= 0) {
                    return value
                }
                var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
                if (value >= half && (bits <= 32 || value > half)) {
                    value = -2 * half + value
                }
                return value
            }

            if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5)Math["imul"] = function imul(a, b) {
                var ah = a >>> 16;
                var al = a & 65535;
                var bh = b >>> 16;
                var bl = b & 65535;
                return al * bl + (ah * bl + al * bh << 16) | 0
            };
            Math.imul = Math["imul"];
            if (!Math["clz32"])Math["clz32"] = (function (x) {
                x = x >>> 0;
                for (var i = 0; i < 32; i++) {
                    if (x & 1 << 31 - i)return i
                }
                return 32
            });
            Math.clz32 = Math["clz32"];
            var Math_abs = Math.abs;
            var Math_cos = Math.cos;
            var Math_sin = Math.sin;
            var Math_tan = Math.tan;
            var Math_acos = Math.acos;
            var Math_asin = Math.asin;
            var Math_atan = Math.atan;
            var Math_atan2 = Math.atan2;
            var Math_exp = Math.exp;
            var Math_log = Math.log;
            var Math_sqrt = Math.sqrt;
            var Math_ceil = Math.ceil;
            var Math_floor = Math.floor;
            var Math_pow = Math.pow;
            var Math_imul = Math.imul;
            var Math_fround = Math.fround;
            var Math_min = Math.min;
            var Math_clz32 = Math.clz32;
            var runDependencies = 0;
            var runDependencyWatcher = null;
            var dependenciesFulfilled = null;

            function getUniqueRunDependency(id) {
                return id
            }

            function addRunDependency(id) {
                runDependencies++;
                if (Module["monitorRunDependencies"]) {
                    Module["monitorRunDependencies"](runDependencies)
                }
            }

            Module["addRunDependency"] = addRunDependency;
            function removeRunDependency(id) {
                runDependencies--;
                if (Module["monitorRunDependencies"]) {
                    Module["monitorRunDependencies"](runDependencies)
                }
                if (runDependencies == 0) {
                    if (runDependencyWatcher !== null) {
                        clearInterval(runDependencyWatcher);
                        runDependencyWatcher = null
                    }
                    if (dependenciesFulfilled) {
                        var callback = dependenciesFulfilled;
                        dependenciesFulfilled = null;
                        callback()
                    }
                }
            }

            Module["removeRunDependency"] = removeRunDependency;
            Module["preloadedImages"] = {};
            Module["preloadedAudios"] = {};
            var memoryInitializer = null;
            var ASM_CONSTS = [];
            STATIC_BASE = 8;
            STATICTOP = STATIC_BASE + 8896;
            __ATINIT__.push();
            allocate([10, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 14, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 16, 0, 0, 0, 20, 0, 0, 0, 25, 0, 0, 0, 18, 0, 0, 0, 23, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 39, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 4, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 4, 0, 0, 0, 22, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 18, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 21, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 255, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 255, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 2, 0, 0, 0, 18, 0, 0, 0, 4, 0, 0, 0, 17, 0, 0, 0, 255, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 2, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 21, 0, 0, 0, 255, 0, 0, 0, 20, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 3, 0, 0, 0, 19, 0, 0, 0, 1, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 4, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 11, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 4, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 2, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 12, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 255, 0, 0, 0, 12, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 8, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 13, 0, 0, 0, 255, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 192, 30, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 32, 38, 16, 6, 8, 101, 24, 101, 24, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 34, 8, 0, 0, 0, 0, 0, 0, 0, 0, 106, 64, 74, 48, 42, 40, 10, 32, 105, 56, 105, 56, 73, 40, 73, 40, 41, 32, 41, 32, 9, 24, 9, 24, 104, 48, 104, 48, 104, 48, 104, 48, 72, 32, 72, 32, 72, 32, 72, 32, 40, 24, 40, 24, 40, 24, 40, 24, 8, 16, 8, 16, 8, 16, 8, 16, 103, 40, 103, 40, 103, 40, 103, 40, 103, 40, 103, 40, 103, 40, 103, 40, 71, 24, 71, 24, 71, 24, 71, 24, 71, 24, 71, 24, 71, 24, 71, 24, 110, 96, 78, 88, 46, 80, 14, 80, 110, 88, 78, 80, 46, 72, 14, 72, 13, 64, 13, 64, 77, 72, 77, 72, 45, 64, 45, 64, 13, 56, 13, 56, 109, 80, 109, 80, 77, 64, 77, 64, 45, 56, 45, 56, 13, 48, 13, 48, 107, 72, 107, 72, 107, 72, 107, 72, 107, 72, 107, 72, 107, 72, 107, 72, 75, 56, 75, 56, 75, 56, 75, 56, 75, 56, 75, 56, 75, 56, 75, 56, 43, 48, 43, 48, 43, 48, 43, 48, 43, 48, 43, 48, 43, 48, 43, 48, 11, 40, 11, 40, 11, 40, 11, 40, 11, 40, 11, 40, 11, 40, 11, 40, 0, 0, 0, 0, 47, 104, 47, 104, 16, 128, 80, 128, 48, 128, 16, 120, 112, 128, 80, 120, 48, 120, 16, 112, 112, 120, 80, 112, 48, 112, 16, 104, 111, 112, 111, 112, 79, 104, 79, 104, 47, 96, 47, 96, 15, 96, 15, 96, 111, 104, 111, 104, 79, 96, 79, 96, 47, 88, 47, 88, 15, 88, 15, 88, 0, 0, 0, 0, 0, 0, 0, 0, 102, 56, 70, 32, 38, 32, 6, 16, 102, 48, 70, 24, 38, 24, 6, 8, 101, 40, 101, 40, 37, 16, 37, 16, 100, 32, 100, 32, 100, 32, 100, 32, 100, 24, 100, 24, 100, 24, 100, 24, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 67, 16, 0, 0, 0, 0, 0, 0, 0, 0, 105, 72, 73, 56, 41, 56, 9, 48, 8, 40, 8, 40, 72, 48, 72, 48, 40, 48, 40, 48, 8, 32, 8, 32, 103, 64, 103, 64, 103, 64, 103, 64, 71, 40, 71, 40, 71, 40, 71, 40, 39, 40, 39, 40, 39, 40, 39, 40, 7, 24, 7, 24, 7, 24, 7, 24, 0, 0, 0, 0, 109, 120, 109, 120, 110, 128, 78, 128, 46, 128, 14, 128, 46, 120, 14, 120, 78, 120, 46, 112, 77, 112, 77, 112, 13, 112, 13, 112, 109, 112, 109, 112, 77, 104, 77, 104, 45, 104, 45, 104, 13, 104, 13, 104, 109, 104, 109, 104, 77, 96, 77, 96, 45, 96, 45, 96, 13, 96, 13, 96, 12, 88, 12, 88, 12, 88, 12, 88, 76, 88, 76, 88, 76, 88, 76, 88, 44, 88, 44, 88, 44, 88, 44, 88, 12, 80, 12, 80, 12, 80, 12, 80, 108, 96, 108, 96, 108, 96, 108, 96, 76, 80, 76, 80, 76, 80, 76, 80, 44, 80, 44, 80, 44, 80, 44, 80, 12, 72, 12, 72, 12, 72, 12, 72, 107, 88, 107, 88, 107, 88, 107, 88, 107, 88, 107, 88, 107, 88, 107, 88, 75, 72, 75, 72, 75, 72, 75, 72, 75, 72, 75, 72, 75, 72, 75, 72, 43, 72, 43, 72, 43, 72, 43, 72, 43, 72, 43, 72, 43, 72, 43, 72, 11, 64, 11, 64, 11, 64, 11, 64, 11, 64, 11, 64, 11, 64, 11, 64, 107, 80, 107, 80, 107, 80, 107, 80, 107, 80, 107, 80, 107, 80, 107, 80, 75, 64, 75, 64, 75, 64, 75, 64, 75, 64, 75, 64, 75, 64, 75, 64, 43, 64, 43, 64, 43, 64, 43, 64, 43, 64, 43, 64, 43, 64, 43, 64, 11, 56, 11, 56, 11, 56, 11, 56, 11, 56, 11, 56, 11, 56, 11, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 24, 70, 56, 38, 56, 6, 16, 102, 72, 70, 48, 38, 48, 6, 8, 37, 40, 37, 40, 69, 40, 69, 40, 37, 32, 37, 32, 69, 32, 69, 32, 37, 24, 37, 24, 101, 64, 101, 64, 69, 24, 69, 24, 37, 16, 37, 16, 100, 56, 100, 56, 100, 56, 100, 56, 100, 48, 100, 48, 100, 48, 100, 48, 100, 40, 100, 40, 100, 40, 100, 40, 100, 32, 100, 32, 100, 32, 100, 32, 100, 24, 100, 24, 100, 24, 100, 24, 68, 16, 68, 16, 68, 16, 68, 16, 36, 8, 36, 8, 36, 8, 36, 8, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 10, 128, 106, 128, 74, 128, 42, 128, 10, 120, 106, 120, 74, 120, 42, 120, 10, 112, 106, 112, 74, 112, 42, 112, 10, 104, 41, 104, 41, 104, 9, 96, 9, 96, 73, 104, 73, 104, 41, 96, 41, 96, 9, 88, 9, 88, 105, 104, 105, 104, 73, 96, 73, 96, 41, 88, 41, 88, 9, 80, 9, 80, 104, 96, 104, 96, 104, 96, 104, 96, 72, 88, 72, 88, 72, 88, 72, 88, 40, 80, 40, 80, 40, 80, 40, 80, 8, 72, 8, 72, 8, 72, 8, 72, 104, 88, 104, 88, 104, 88, 104, 88, 72, 80, 72, 80, 72, 80, 72, 80, 40, 72, 40, 72, 40, 72, 40, 72, 8, 64, 8, 64, 8, 64, 8, 64, 7, 56, 7, 56, 7, 56, 7, 56, 7, 56, 7, 56, 7, 56, 7, 56, 7, 48, 7, 48, 7, 48, 7, 48, 7, 48, 7, 48, 7, 48, 7, 48, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 71, 72, 7, 40, 7, 40, 7, 40, 7, 40, 7, 40, 7, 40, 7, 40, 7, 40, 103, 80, 103, 80, 103, 80, 103, 80, 103, 80, 103, 80, 103, 80, 103, 80, 71, 64, 71, 64, 71, 64, 71, 64, 71, 64, 71, 64, 71, 64, 71, 64, 39, 64, 39, 64, 39, 64, 39, 64, 39, 64, 39, 64, 39, 64, 39, 64, 7, 32, 7, 32, 7, 32, 7, 32, 7, 32, 7, 32, 7, 32, 7, 32, 6, 8, 38, 8, 0, 0, 6, 0, 6, 16, 38, 16, 70, 16, 0, 0, 6, 24, 38, 24, 70, 24, 102, 24, 6, 32, 38, 32, 70, 32, 102, 32, 6, 40, 38, 40, 70, 40, 102, 40, 6, 48, 38, 48, 70, 48, 102, 48, 6, 56, 38, 56, 70, 56, 102, 56, 6, 64, 38, 64, 70, 64, 102, 64, 6, 72, 38, 72, 70, 72, 102, 72, 6, 80, 38, 80, 70, 80, 102, 80, 6, 88, 38, 88, 70, 88, 102, 88, 6, 96, 38, 96, 70, 96, 102, 96, 6, 104, 38, 104, 70, 104, 102, 104, 6, 112, 38, 112, 70, 112, 102, 112, 6, 120, 38, 120, 70, 120, 102, 120, 6, 128, 38, 128, 70, 128, 102, 128, 0, 0, 67, 16, 2, 0, 2, 0, 33, 8, 33, 8, 33, 8, 33, 8, 103, 32, 103, 32, 72, 32, 40, 32, 71, 24, 71, 24, 39, 24, 39, 24, 6, 32, 6, 32, 6, 32, 6, 32, 6, 24, 6, 24, 6, 24, 6, 24, 6, 16, 6, 16, 6, 16, 6, 16, 102, 24, 102, 24, 102, 24, 102, 24, 38, 16, 38, 16, 38, 16, 38, 16, 6, 8, 6, 8, 6, 8, 6, 8, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 16, 1, 2, 4, 8, 32, 3, 5, 10, 12, 15, 47, 7, 11, 13, 14, 6, 9, 31, 35, 37, 42, 44, 33, 34, 36, 40, 39, 43, 45, 46, 17, 18, 20, 24, 19, 21, 26, 28, 23, 27, 29, 30, 22, 25, 38, 41, 47, 31, 15, 0, 23, 27, 29, 30, 7, 11, 13, 14, 39, 43, 45, 46, 16, 3, 5, 10, 12, 19, 21, 26, 28, 35, 37, 42, 44, 1, 2, 4, 8, 17, 18, 20, 24, 6, 9, 22, 25, 32, 33, 34, 36, 40, 38, 41, 0, 0, 101, 85, 68, 68, 52, 52, 35, 35, 35, 35, 19, 19, 19, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 249, 233, 217, 200, 200, 184, 184, 167, 167, 167, 167, 151, 151, 151, 151, 134, 134, 134, 134, 134, 134, 134, 134, 118, 118, 118, 118, 118, 118, 118, 118, 230, 214, 198, 182, 165, 165, 149, 149, 132, 132, 132, 132, 116, 116, 116, 116, 100, 100, 100, 100, 84, 84, 84, 84, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 19, 19, 19, 19, 19, 19, 19, 19, 3, 3, 3, 3, 3, 3, 3, 3, 214, 182, 197, 197, 165, 165, 149, 149, 132, 132, 132, 132, 84, 84, 84, 84, 68, 68, 68, 68, 4, 4, 4, 4, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 19, 19, 19, 19, 19, 19, 19, 19, 197, 181, 165, 5, 148, 148, 116, 116, 52, 52, 36, 36, 131, 131, 131, 131, 99, 99, 99, 99, 83, 83, 83, 83, 67, 67, 67, 67, 19, 19, 19, 19, 181, 149, 164, 164, 132, 132, 36, 36, 20, 20, 4, 4, 115, 115, 115, 115, 99, 99, 99, 99, 83, 83, 83, 83, 67, 67, 67, 67, 51, 51, 51, 51, 166, 6, 21, 21, 132, 132, 132, 132, 147, 147, 147, 147, 147, 147, 147, 147, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 83, 83, 83, 83, 83, 83, 83, 83, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 150, 6, 21, 21, 116, 116, 116, 116, 131, 131, 131, 131, 131, 131, 131, 131, 99, 99, 99, 99, 99, 99, 99, 99, 67, 67, 67, 67, 67, 67, 67, 67, 51, 51, 51, 51, 51, 51, 51, 51, 35, 35, 35, 35, 35, 35, 35, 35, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 134, 6, 37, 37, 20, 20, 20, 20, 115, 115, 115, 115, 115, 115, 115, 115, 99, 99, 99, 99, 99, 99, 99, 99, 51, 51, 51, 51, 51, 51, 51, 51, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 22, 6, 117, 117, 36, 36, 36, 36, 83, 83, 83, 83, 83, 83, 83, 83, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 21, 5, 100, 100, 35, 35, 35, 35, 82, 82, 82, 82, 82, 82, 82, 82, 66, 66, 66, 66, 66, 66, 66, 66, 50, 50, 50, 50, 50, 50, 50, 50, 4, 20, 35, 35, 51, 51, 83, 83, 65, 65, 65, 65, 65, 65, 65, 65, 4, 20, 67, 67, 34, 34, 34, 34, 49, 49, 49, 49, 49, 49, 49, 49, 3, 19, 50, 50, 33, 33, 33, 33, 2, 18, 33, 33, 17, 1, 34, 18, 1, 1, 50, 34, 18, 2, 67, 51, 34, 34, 18, 18, 2, 2, 83, 67, 51, 35, 18, 18, 2, 2, 19, 35, 67, 51, 99, 83, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 20, 22, 25, 28, 32, 36, 40, 45, 50, 56, 63, 71, 80, 90, 101, 113, 127, 144, 162, 182, 203, 226, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 3, 1, 2, 3, 2, 2, 3, 2, 2, 4, 2, 3, 4, 2, 3, 4, 3, 3, 5, 3, 4, 6, 3, 4, 6, 4, 5, 7, 4, 5, 8, 4, 6, 9, 5, 7, 10, 6, 8, 11, 6, 8, 13, 7, 10, 14, 8, 11, 16, 9, 12, 18, 10, 13, 20, 11, 15, 23, 13, 17, 25, 68, 69, 67, 79, 68, 69, 82, 32, 73, 78, 73, 84, 73, 65, 76, 73, 90, 65, 84, 73, 79, 78, 32, 70, 65, 73, 76, 69, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
            var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
            assert(tempDoublePtr % 8 == 0);
            function copyTempFloat(ptr) {
                HEAP8[tempDoublePtr] = HEAP8[ptr];
                HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
                HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
                HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3]
            }

            function copyTempDouble(ptr) {
                HEAP8[tempDoublePtr] = HEAP8[ptr];
                HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
                HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
                HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
                HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
                HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
                HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
                HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7]
            }

            function ___setErrNo(value) {
                if (Module["___errno_location"])HEAP32[Module["___errno_location"]() >> 2] = value;
                return value
            }

            var ERRNO_CODES = {
                EPERM: 1,
                ENOENT: 2,
                ESRCH: 3,
                EINTR: 4,
                EIO: 5,
                ENXIO: 6,
                E2BIG: 7,
                ENOEXEC: 8,
                EBADF: 9,
                ECHILD: 10,
                EAGAIN: 11,
                EWOULDBLOCK: 11,
                ENOMEM: 12,
                EACCES: 13,
                EFAULT: 14,
                ENOTBLK: 15,
                EBUSY: 16,
                EEXIST: 17,
                EXDEV: 18,
                ENODEV: 19,
                ENOTDIR: 20,
                EISDIR: 21,
                EINVAL: 22,
                ENFILE: 23,
                EMFILE: 24,
                ENOTTY: 25,
                ETXTBSY: 26,
                EFBIG: 27,
                ENOSPC: 28,
                ESPIPE: 29,
                EROFS: 30,
                EMLINK: 31,
                EPIPE: 32,
                EDOM: 33,
                ERANGE: 34,
                ENOMSG: 42,
                EIDRM: 43,
                ECHRNG: 44,
                EL2NSYNC: 45,
                EL3HLT: 46,
                EL3RST: 47,
                ELNRNG: 48,
                EUNATCH: 49,
                ENOCSI: 50,
                EL2HLT: 51,
                EDEADLK: 35,
                ENOLCK: 37,
                EBADE: 52,
                EBADR: 53,
                EXFULL: 54,
                ENOANO: 55,
                EBADRQC: 56,
                EBADSLT: 57,
                EDEADLOCK: 35,
                EBFONT: 59,
                ENOSTR: 60,
                ENODATA: 61,
                ETIME: 62,
                ENOSR: 63,
                ENONET: 64,
                ENOPKG: 65,
                EREMOTE: 66,
                ENOLINK: 67,
                EADV: 68,
                ESRMNT: 69,
                ECOMM: 70,
                EPROTO: 71,
                EMULTIHOP: 72,
                EDOTDOT: 73,
                EBADMSG: 74,
                ENOTUNIQ: 76,
                EBADFD: 77,
                EREMCHG: 78,
                ELIBACC: 79,
                ELIBBAD: 80,
                ELIBSCN: 81,
                ELIBMAX: 82,
                ELIBEXEC: 83,
                ENOSYS: 38,
                ENOTEMPTY: 39,
                ENAMETOOLONG: 36,
                ELOOP: 40,
                EOPNOTSUPP: 95,
                EPFNOSUPPORT: 96,
                ECONNRESET: 104,
                ENOBUFS: 105,
                EAFNOSUPPORT: 97,
                EPROTOTYPE: 91,
                ENOTSOCK: 88,
                ENOPROTOOPT: 92,
                ESHUTDOWN: 108,
                ECONNREFUSED: 111,
                EADDRINUSE: 98,
                ECONNABORTED: 103,
                ENETUNREACH: 101,
                ENETDOWN: 100,
                ETIMEDOUT: 110,
                EHOSTDOWN: 112,
                EHOSTUNREACH: 113,
                EINPROGRESS: 115,
                EALREADY: 114,
                EDESTADDRREQ: 89,
                EMSGSIZE: 90,
                EPROTONOSUPPORT: 93,
                ESOCKTNOSUPPORT: 94,
                EADDRNOTAVAIL: 99,
                ENETRESET: 102,
                EISCONN: 106,
                ENOTCONN: 107,
                ETOOMANYREFS: 109,
                EUSERS: 87,
                EDQUOT: 122,
                ESTALE: 116,
                ENOTSUP: 95,
                ENOMEDIUM: 123,
                EILSEQ: 84,
                EOVERFLOW: 75,
                ECANCELED: 125,
                ENOTRECOVERABLE: 131,
                EOWNERDEAD: 130,
                ESTRPIPE: 86
            };

            function _sysconf(name) {
                switch (name) {
                    case 30:
                        return PAGE_SIZE;
                    case 85:
                        return totalMemory / PAGE_SIZE;
                    case 132:
                    case 133:
                    case 12:
                    case 137:
                    case 138:
                    case 15:
                    case 235:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 149:
                    case 13:
                    case 10:
                    case 236:
                    case 153:
                    case 9:
                    case 21:
                    case 22:
                    case 159:
                    case 154:
                    case 14:
                    case 77:
                    case 78:
                    case 139:
                    case 80:
                    case 81:
                    case 82:
                    case 68:
                    case 67:
                    case 164:
                    case 11:
                    case 29:
                    case 47:
                    case 48:
                    case 95:
                    case 52:
                    case 51:
                    case 46:
                        return 200809;
                    case 79:
                        return 0;
                    case 27:
                    case 246:
                    case 127:
                    case 128:
                    case 23:
                    case 24:
                    case 160:
                    case 161:
                    case 181:
                    case 182:
                    case 242:
                    case 183:
                    case 184:
                    case 243:
                    case 244:
                    case 245:
                    case 165:
                    case 178:
                    case 179:
                    case 49:
                    case 50:
                    case 168:
                    case 169:
                    case 175:
                    case 170:
                    case 171:
                    case 172:
                    case 97:
                    case 76:
                    case 32:
                    case 173:
                    case 35:
                        return -1;
                    case 176:
                    case 177:
                    case 7:
                    case 155:
                    case 8:
                    case 157:
                    case 125:
                    case 126:
                    case 92:
                    case 93:
                    case 129:
                    case 130:
                    case 131:
                    case 94:
                    case 91:
                        return 1;
                    case 74:
                    case 60:
                    case 69:
                    case 70:
                    case 4:
                        return 1024;
                    case 31:
                    case 42:
                    case 72:
                        return 32;
                    case 87:
                    case 26:
                    case 33:
                        return 2147483647;
                    case 34:
                    case 1:
                        return 47839;
                    case 38:
                    case 36:
                        return 99;
                    case 43:
                    case 37:
                        return 2048;
                    case 0:
                        return 2097152;
                    case 3:
                        return 65536;
                    case 28:
                        return 32768;
                    case 44:
                        return 32767;
                    case 75:
                        return 16384;
                    case 39:
                        return 1e3;
                    case 89:
                        return 700;
                    case 71:
                        return 256;
                    case 40:
                        return 255;
                    case 2:
                        return 100;
                    case 180:
                        return 64;
                    case 25:
                        return 20;
                    case 5:
                        return 16;
                    case 6:
                        return 6;
                    case 73:
                        return 4;
                    case 84: {
                        if (typeof navigator === "object")return navigator["hardwareConcurrency"] || 1;
                        return 1
                    }
                }
                ___setErrNo(ERRNO_CODES.EINVAL);
                return -1
            }

            Module["_memset"] = _memset;
            function _pthread_cleanup_push(routine, arg) {
                __ATEXIT__.push((function () {
                    Runtime.dynCall("vi", routine, [arg])
                }));
                _pthread_cleanup_push.level = __ATEXIT__.length
            }

            function _broadwayOnPictureDecoded($buffer, width, height) {
                par_broadwayOnPictureDecoded($buffer, width, height)
            }

            Module["_broadwayOnPictureDecoded"] = _broadwayOnPictureDecoded;
            function _pthread_cleanup_pop() {
                assert(_pthread_cleanup_push.level == __ATEXIT__.length, "cannot pop if something else added meanwhile!");
                __ATEXIT__.pop();
                _pthread_cleanup_push.level = __ATEXIT__.length
            }

            function _abort() {
                Module["abort"]()
            }

            function _emscripten_memcpy_big(dest, src, num) {
                HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
                return dest
            }

            Module["_memcpy"] = _memcpy;
            var SYSCALLS = {
                varargs: 0, get: (function (varargs) {
                    SYSCALLS.varargs += 4;
                    var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
                    return ret
                }), getStr: (function () {
                    var ret = Pointer_stringify(SYSCALLS.get());
                    return ret
                }), get64: (function () {
                    var low = SYSCALLS.get(), high = SYSCALLS.get();
                    if (low >= 0)assert(high === 0); else assert(high === -1);
                    return low
                }), getZero: (function () {
                    assert(SYSCALLS.get() === 0)
                })
            };

            function ___syscall6(which, varargs) {
                SYSCALLS.varargs = varargs;
                try {
                    var stream = SYSCALLS.getStreamFromFD();
                    FS.close(stream);
                    return 0
                } catch (e) {
                    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))abort(e);
                    return -e.errno
                }
            }

            function _sbrk(bytes) {
                var self = _sbrk;
                if (!self.called) {
                    DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
                    self.called = true;
                    assert(Runtime.dynamicAlloc);
                    self.alloc = Runtime.dynamicAlloc;
                    Runtime.dynamicAlloc = (function () {
                        abort("cannot dynamically allocate, sbrk now has control")
                    })
                }
                var ret = DYNAMICTOP;
                if (bytes != 0) {
                    var success = self.alloc(bytes);
                    if (!success)return -1 >>> 0
                }
                return ret
            }

            function _broadwayOnHeadersDecoded() {
                par_broadwayOnHeadersDecoded()
            }

            Module["_broadwayOnHeadersDecoded"] = _broadwayOnHeadersDecoded;
            function _time(ptr) {
                var ret = Date.now() / 1e3 | 0;
                if (ptr) {
                    HEAP32[ptr >> 2] = ret
                }
                return ret
            }

            function _pthread_self() {
                return 0
            }

            function ___syscall140(which, varargs) {
                SYSCALLS.varargs = varargs;
                try {
                    var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
                    var offset = offset_low;
                    assert(offset_high === 0);
                    FS.llseek(stream, offset, whence);
                    HEAP32[result >> 2] = stream.position;
                    if (stream.getdents && offset === 0 && whence === 0)stream.getdents = null;
                    return 0
                } catch (e) {
                    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))abort(e);
                    return -e.errno
                }
            }

            function ___syscall146(which, varargs) {
                SYSCALLS.varargs = varargs;
                try {
                    var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
                    var ret = 0;
                    if (!___syscall146.buffer)___syscall146.buffer = [];
                    var buffer = ___syscall146.buffer;
                    for (var i = 0; i < iovcnt; i++) {
                        var ptr = HEAP32[iov + i * 8 >> 2];
                        var len = HEAP32[iov + (i * 8 + 4) >> 2];
                        for (var j = 0; j < len; j++) {
                            var curr = HEAPU8[ptr + j];
                            if (curr === 0 || curr === 10) {
                                Module["print"](UTF8ArrayToString(buffer, 0));
                                buffer.length = 0
                            } else {
                                buffer.push(curr)
                            }
                        }
                        ret += len
                    }
                    return ret
                } catch (e) {
                    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))abort(e);
                    return -e.errno
                }
            }

            function ___syscall54(which, varargs) {
                SYSCALLS.varargs = varargs;
                try {
                    return 0
                } catch (e) {
                    if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))abort(e);
                    return -e.errno
                }
            }

            STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
            staticSealed = true;
            STACK_MAX = STACK_BASE + TOTAL_STACK;
            DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
            assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
            function invoke_ii(index, a1) {
                try {
                    return Module["dynCall_ii"](index, a1)
                } catch (e) {
                    if (typeof e !== "number" && e !== "longjmp")throw e;
                    asm["setThrew"](1, 0)
                }
            }

            function invoke_iiii(index, a1, a2, a3) {
                try {
                    return Module["dynCall_iiii"](index, a1, a2, a3)
                } catch (e) {
                    if (typeof e !== "number" && e !== "longjmp")throw e;
                    asm["setThrew"](1, 0)
                }
            }

            function invoke_viiiii(index, a1, a2, a3, a4, a5) {
                try {
                    Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5)
                } catch (e) {
                    if (typeof e !== "number" && e !== "longjmp")throw e;
                    asm["setThrew"](1, 0)
                }
            }

            function invoke_vi(index, a1) {
                try {
                    Module["dynCall_vi"](index, a1)
                } catch (e) {
                    if (typeof e !== "number" && e !== "longjmp")throw e;
                    asm["setThrew"](1, 0)
                }
            }

            Module.asmGlobalArg = {
                "Math": Math,
                "Int8Array": Int8Array,
                "Int16Array": Int16Array,
                "Int32Array": Int32Array,
                "Uint8Array": Uint8Array,
                "Uint16Array": Uint16Array,
                "Uint32Array": Uint32Array,
                "Float32Array": Float32Array,
                "Float64Array": Float64Array,
                "NaN": NaN,
                "Infinity": Infinity
            };
            Module.asmLibraryArg = {
                "abort": abort,
                "assert": assert,
                "invoke_ii": invoke_ii,
                "invoke_iiii": invoke_iiii,
                "invoke_viiiii": invoke_viiiii,
                "invoke_vi": invoke_vi,
                "_broadwayOnPictureDecoded": _broadwayOnPictureDecoded,
                "_pthread_cleanup_pop": _pthread_cleanup_pop,
                "_pthread_self": _pthread_self,
                "___syscall6": ___syscall6,
                "___setErrNo": ___setErrNo,
                "_abort": _abort,
                "_sbrk": _sbrk,
                "_time": _time,
                "_pthread_cleanup_push": _pthread_cleanup_push,
                "_emscripten_memcpy_big": _emscripten_memcpy_big,
                "___syscall54": ___syscall54,
                "_broadwayOnHeadersDecoded": _broadwayOnHeadersDecoded,
                "___syscall140": ___syscall140,
                "_sysconf": _sysconf,
                "___syscall146": ___syscall146,
                "STACKTOP": STACKTOP,
                "STACK_MAX": STACK_MAX,
                "tempDoublePtr": tempDoublePtr,
                "ABORT": ABORT
            };// EMSCRIPTEN_START_ASM




//// here

            var _dependencies = {
                "global": Module.asmGlobalArg,
                "env": Module.asmLibraryArg,
                "buffer": buffer
            };
            //dependencies["global.Math"] = window.Math;
            var moduleBufferView = new Uint8Array(globalAsmBuffer);
            var varAsmModule = new WebAssembly.Instance(new WebAssembly.Module(moduleBufferView), _dependencies);
            var asm =  varAsmModule.exports;





            // EMSCRIPTEN_END_ASM
            (Module.asmGlobalArg, Module.asmLibraryArg, buffer);
            var _free = Module["_free"] = asm["_free"];
            var runPostSets = Module["runPostSets"] = asm["runPostSets"];
            var _broadwayGetMajorVersion = Module["_broadwayGetMajorVersion"] = asm["_broadwayGetMajorVersion"];
            var _broadwayExit = Module["_broadwayExit"] = asm["_broadwayExit"];
            var _broadwayGetMinorVersion = Module["_broadwayGetMinorVersion"] = asm["_broadwayGetMinorVersion"];
            var _memset = Module["_memset"] = asm["_memset"];
            var _broadwayCreateStream = Module["_broadwayCreateStream"] = asm["_broadwayCreateStream"];
            var _malloc = Module["_malloc"] = asm["_malloc"];
            var _memcpy = Module["_memcpy"] = asm["_memcpy"];
            var _broadwayPlayStream = Module["_broadwayPlayStream"] = asm["_broadwayPlayStream"];
            var _broadwayInit = Module["_broadwayInit"] = asm["_broadwayInit"];
            var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
            var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
            var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
            var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
            Runtime.stackAlloc = asm["stackAlloc"];
            Runtime.stackSave = asm["stackSave"];
            Runtime.stackRestore = asm["stackRestore"];
            Runtime.establishStackSpace = asm["establishStackSpace"];
            Runtime.setTempRet0 = asm["setTempRet0"];
            Runtime.getTempRet0 = asm["getTempRet0"];
            function ExitStatus(status) {
                this.name = "ExitStatus";
                this.message = "Program terminated with exit(" + status + ")";
                this.status = status
            }

            ExitStatus.prototype = new Error;
            ExitStatus.prototype.constructor = ExitStatus;
            var initialStackTop;
            var preloadStartTime = null;
            var calledMain = false;
            dependenciesFulfilled = function runCaller() {
                if (!Module["calledRun"])run();
                if (!Module["calledRun"])dependenciesFulfilled = runCaller
            };
            Module["callMain"] = Module.callMain = function callMain(args) {
                assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
                assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
                args = args || [];
                ensureInitRuntime();
                var argc = args.length + 1;

                function pad() {
                    for (var i = 0; i < 4 - 1; i++) {
                        argv.push(0)
                    }
                }

                var argv = [allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL)];
                pad();
                for (var i = 0; i < argc - 1; i = i + 1) {
                    argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
                    pad()
                }
                argv.push(0);
                argv = allocate(argv, "i32", ALLOC_NORMAL);
                try {
                    var ret = Module["_main"](argc, argv, 0);
                    exit(ret, true)
                } catch (e) {
                    if (e instanceof ExitStatus) {
                        return
                    } else if (e == "SimulateInfiniteLoop") {
                        Module["noExitRuntime"] = true;
                        return
                    } else {
                        if (e && typeof e === "object" && e.stack)Module.printErr("exception thrown: " + [e, e.stack]);
                        throw e
                    }
                } finally {
                    calledMain = true
                }
            };
            function run(args) {
                args = args || Module["arguments"];
                if (preloadStartTime === null)preloadStartTime = Date.now();
                if (runDependencies > 0) {
                    return
                }
                preRun();
                if (runDependencies > 0)return;
                if (Module["calledRun"])return;
                function doRun() {
                    if (Module["calledRun"])return;
                    Module["calledRun"] = true;
                    if (ABORT)return;
                    ensureInitRuntime();
                    preMain();
                    if (Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();
                    if (Module["_main"] && shouldRunNow)Module["callMain"](args);
                    postRun()
                }

                if (Module["setStatus"]) {
                    Module["setStatus"]("Running...");
                    setTimeout((function () {
                        setTimeout((function () {
                            Module["setStatus"]("")
                        }), 1);
                        doRun()
                    }), 1)
                } else {
                    doRun()
                }
            }

            Module["run"] = Module.run = run;
            function exit(status, implicit) {
                if (implicit && Module["noExitRuntime"]) {
                    return
                }
                if (Module["noExitRuntime"]) {
                } else {
                    ABORT = true;
                    EXITSTATUS = status;
                    STACKTOP = initialStackTop;
                    exitRuntime();
                    if (Module["onExit"])Module["onExit"](status)
                }
                if (ENVIRONMENT_IS_NODE) {
                    process["stdout"]["once"]("drain", (function () {
                        process["exit"](status)
                    }));
                    console.log(" ");
                    setTimeout((function () {
                        process["exit"](status)
                    }), 500)
                } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
                    quit(status)
                }
                throw new ExitStatus(status)
            }

            Module["exit"] = Module.exit = exit;
            var abortDecorators = [];

            function abort(what) {
                if (what !== undefined) {
                    Module.print(what);
                    Module.printErr(what);
                    what = JSON.stringify(what)
                } else {
                    what = ""
                }
                ABORT = true;
                EXITSTATUS = 1;
                var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
                var output = "abort(" + what + ") at " + stackTrace() + extra;
                if (abortDecorators) {
                    abortDecorators.forEach((function (decorator) {
                        output = decorator(output, what)
                    }))
                }
                throw output
            }

            Module["abort"] = Module.abort = abort;
            if (Module["preInit"]) {
                if (typeof Module["preInit"] == "function")Module["preInit"] = [Module["preInit"]];
                while (Module["preInit"].length > 0) {
                    Module["preInit"].pop()()
                }
            }
            var shouldRunNow = false;
            if (Module["noInitialRun"]) {
                shouldRunNow = false
            }
            Module["noExitRuntime"] = true;
            run()


            return Module;
        })();

        var resultModule = global.Module || Module;

        resultModule._broadwayOnHeadersDecoded = par_broadwayOnHeadersDecoded;
        resultModule._broadwayOnPictureDecoded = par_broadwayOnPictureDecoded;

        return resultModule;
    };

    return (function () {
        "use strict";


        var nowValue = function () {
            return (new Date()).getTime();
        };

        if (typeof performance != "undefined") {
            if (performance.now) {
                nowValue = function () {
                    return performance.now();
                };
            }
            ;
        }
        ;


        var Decoder = function (parOptions) {
            this.options = parOptions || {};

            this.now = nowValue;

            var asmInstance;

            var fakeWindow = {};

            var onPicFun = function ($buffer, width, height) {
                var buffer = this.pictureBuffers[$buffer];
                if (!buffer) {
                    buffer = this.pictureBuffers[$buffer] = toU8Array($buffer, (width * height * 3) / 2);
                }
                ;

                var infos;
                var doInfo = false;
                if (this.infoAr.length) {
                    doInfo = true;
                    infos = this.infoAr;
                }
                ;
                this.infoAr = [];

                if (this.options.rgb) {
                    if (!asmInstance) {
                        asmInstance = getAsm(width, height);
                    }
                    ;
                    asmInstance.inp.set(buffer);
                    asmInstance.doit();

                    var copyU8 = new Uint8Array(asmInstance.outSize);
                    copyU8.set(asmInstance.out);

                    if (doInfo) {
                        infos[0].finishDecoding = nowValue();
                    }
                    ;

                    this.onPictureDecoded(copyU8, width, height, infos);
                    return;

                }
                ;

                if (doInfo) {
                    infos[0].finishDecoding = nowValue();
                }
                ;
                this.onPictureDecoded(buffer, width, height, infos);
            }.bind(this);

            var ignore = false;

            if (this.options.sliceMode) {
                onPicFun = function ($buffer, width, height, $sliceInfo) {
                    if (ignore) {
                        return;
                    }
                    ;
                    var buffer = this.pictureBuffers[$buffer];
                    if (!buffer) {
                        buffer = this.pictureBuffers[$buffer] = toU8Array($buffer, (width * height * 3) / 2);
                    }
                    ;
                    var sliceInfo = this.pictureBuffers[$sliceInfo];
                    if (!sliceInfo) {
                        sliceInfo = this.pictureBuffers[$sliceInfo] = toU32Array($sliceInfo, 18);
                    }
                    ;

                    var infos;
                    var doInfo = false;
                    if (this.infoAr.length) {
                        doInfo = true;
                        infos = this.infoAr;
                    }
                    ;
                    this.infoAr = [];

                    /*if (this.options.rgb){

                     no rgb in slice mode

                     };*/

                    infos[0].finishDecoding = nowValue();
                    var sliceInfoAr = [];
                    for (var i = 0; i < 20; ++i) {
                        sliceInfoAr.push(sliceInfo[i]);
                    }
                    ;
                    infos[0].sliceInfoAr = sliceInfoAr;

                    this.onPictureDecoded(buffer, width, height, infos);
                }.bind(this);
            }
            ;

            var Module = getModule.apply(fakeWindow, [function () {
            }, onPicFun]);


            var HEAP8 = Module.HEAP8;
            var HEAPU8 = Module.HEAPU8;
            var HEAP16 = Module.HEAP16;
            var HEAP32 = Module.HEAP32;


            var MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;

            // from old constructor
            Module._broadwayInit();

            /**
             * Creates a typed array from a HEAP8 pointer.
             */
            function toU8Array(ptr, length) {
                return HEAPU8.subarray(ptr, ptr + length);
            };
            function toU32Array(ptr, length) {
                //var tmp = HEAPU8.subarray(ptr, ptr + (length * 4));
                return new Uint32Array(HEAPU8.buffer, ptr, length);
            };
            this.streamBuffer = toU8Array(Module._broadwayCreateStream(MAX_STREAM_BUFFER_LENGTH), MAX_STREAM_BUFFER_LENGTH);
            this.pictureBuffers = {};
            // collect extra infos that are provided with the nal units
            this.infoAr = [];

            this.onPictureDecoded = function (buffer, width, height, infos) {

            };

            /**
             * Decodes a stream buffer. This may be one single (unframed) NAL unit without the
             * start code, or a sequence of NAL units with framing start code prefixes. This
             * function overwrites stream buffer allocated by the codec with the supplied buffer.
             */

            var sliceNum = 0;
            if (this.options.sliceMode) {
                sliceNum = this.options.sliceNum;

                this.decode = function decode(typedAr, parInfo, copyDoneFun) {
                    this.infoAr.push(parInfo);
                    parInfo.startDecoding = nowValue();
                    var nals = parInfo.nals;
                    var i;
                    if (!nals) {
                        nals = [];
                        parInfo.nals = nals;
                        var l = typedAr.length;
                        var foundSomething = false;
                        var lastFound = 0;
                        var lastStart = 0;
                        for (i = 0; i < l; ++i) {
                            if (typedAr[i] === 1) {
                                if (
                                    typedAr[i - 1] === 0 &&
                                    typedAr[i - 2] === 0
                                ) {
                                    var startPos = i - 2;
                                    if (typedAr[i - 3] === 0) {
                                        startPos = i - 3;
                                    }
                                    ;
                                    // its a nal;
                                    if (foundSomething) {
                                        nals.push({
                                            offset: lastFound,
                                            end: startPos,
                                            type: typedAr[lastStart] & 31
                                        });
                                    }
                                    ;
                                    lastFound = startPos;
                                    lastStart = startPos + 3;
                                    if (typedAr[i - 3] === 0) {
                                        lastStart = startPos + 4;
                                    }
                                    ;
                                    foundSomething = true;
                                }
                                ;
                            }
                            ;
                        }
                        ;
                        if (foundSomething) {
                            nals.push({
                                offset: lastFound,
                                end: i,
                                type: typedAr[lastStart] & 31
                            });
                        }
                        ;
                    }
                    ;

                    var currentSlice = 0;
                    var playAr;
                    var offset = 0;
                    for (i = 0; i < nals.length; ++i) {
                        if (nals[i].type === 1 || nals[i].type === 5) {
                            if (currentSlice === sliceNum) {
                                playAr = typedAr.subarray(nals[i].offset, nals[i].end);
                                this.streamBuffer[offset] = 0;
                                offset += 1;
                                this.streamBuffer.set(playAr, offset);
                                offset += playAr.length;
                            }
                            ;
                            currentSlice += 1;
                        } else {
                            playAr = typedAr.subarray(nals[i].offset, nals[i].end);
                            this.streamBuffer[offset] = 0;
                            offset += 1;
                            this.streamBuffer.set(playAr, offset);
                            offset += playAr.length;
                            Module._broadwayPlayStream(offset);
                            offset = 0;
                        }
                        ;
                    }
                    ;
                    copyDoneFun();
                    Module._broadwayPlayStream(offset);
                };

            } else {
                this.decode = function decode(typedAr, parInfo) {
                    // console.info("Decoding: " + buffer.length);
                    // collect infos
                    if (parInfo) {
                        this.infoAr.push(parInfo);
                        parInfo.startDecoding = nowValue();
                    }
                    ;

                    this.streamBuffer.set(typedAr);
                    Module._broadwayPlayStream(typedAr.length);
                };
            }
            ;

        };


        Decoder.prototype = {};


        /*

         asm.js implementation of a yuv to rgb convertor
         provided by @soliton4

         based on
         http://www.wordsaretoys.com/2013/10/18/making-yuv-conversion-a-little-faster/

         */


        // factory to create asm.js yuv -> rgb convertor for a given resolution
        var asmInstances = {};
        var getAsm = function (parWidth, parHeight) {
            var idStr = "" + parWidth + "x" + parHeight;
            if (asmInstances[idStr]) {
                return asmInstances[idStr];
            }
            ;

            var lumaSize = parWidth * parHeight;
            var chromaSize = (lumaSize | 0) >> 2;

            var inpSize = lumaSize + chromaSize + chromaSize;
            var outSize = parWidth * parHeight * 4;
            var cacheSize = Math.pow(2, 24) * 4;
            var size = inpSize + outSize + cacheSize;

            var chunkSize = Math.pow(2, 24);
            var heapSize = chunkSize;
            while (heapSize < size) {
                heapSize += chunkSize;
            }
            ;
            var heap = new ArrayBuffer(heapSize);

            var res = asmFactory(global, {}, heap);
            res.init(parWidth, parHeight);
            asmInstances[idStr] = res;

            res.heap = heap;
            res.out = new Uint8Array(heap, 0, outSize);
            res.inp = new Uint8Array(heap, outSize, inpSize);
            res.outSize = outSize;

            return res;
        };


        function asmFactory(stdlib, foreign, heap) {
            "use asm";

            var imul = stdlib.Math.imul;
            var min = stdlib.Math.min;
            var max = stdlib.Math.max;
            var pow = stdlib.Math.pow;
            var out = new stdlib.Uint8Array(heap);
            var out32 = new stdlib.Uint32Array(heap);
            var inp = new stdlib.Uint8Array(heap);
            var mem = new stdlib.Uint8Array(heap);
            var mem32 = new stdlib.Uint32Array(heap);

            // for double algo
            /*var vt = 1.370705;
             var gt = 0.698001;
             var gt2 = 0.337633;
             var bt = 1.732446;*/

            var width = 0;
            var height = 0;
            var lumaSize = 0;
            var chromaSize = 0;
            var inpSize = 0;
            var outSize = 0;

            var inpStart = 0;
            var outStart = 0;

            var widthFour = 0;

            var cacheStart = 0;


            function init(parWidth, parHeight) {
                parWidth = parWidth | 0;
                parHeight = parHeight | 0;

                var i = 0;
                var s = 0;

                width = parWidth;
                widthFour = imul(parWidth, 4) | 0;
                height = parHeight;
                lumaSize = imul(width | 0, height | 0) | 0;
                chromaSize = (lumaSize | 0) >> 2;
                outSize = imul(imul(width, height) | 0, 4) | 0;
                inpSize = ((lumaSize + chromaSize) | 0 + chromaSize) | 0;

                outStart = 0;
                inpStart = (outStart + outSize) | 0;
                cacheStart = (inpStart + inpSize) | 0;

                // initializing memory (to be on the safe side)
                s = ~~(+pow(+2, +24));
                s = imul(s, 4) | 0;

                for (i = 0 | 0; ((i | 0) < (s | 0)) | 0; i = (i + 4) | 0) {
                    mem32[((cacheStart + i) | 0) >> 2] = 0;
                }
                ;
            };

            function doit() {
                var ystart = 0;
                var ustart = 0;
                var vstart = 0;

                var y = 0;
                var yn = 0;
                var u = 0;
                var v = 0;

                var o = 0;

                var line = 0;
                var col = 0;

                var usave = 0;
                var vsave = 0;

                var ostart = 0;
                var cacheAdr = 0;

                ostart = outStart | 0;

                ystart = inpStart | 0;
                ustart = (ystart + lumaSize | 0) | 0;
                vstart = (ustart + chromaSize) | 0;

                for (line = 0; (line | 0) < (height | 0); line = (line + 2) | 0) {
                    usave = ustart;
                    vsave = vstart;
                    for (col = 0; (col | 0) < (width | 0); col = (col + 2) | 0) {
                        y = inp[ystart >> 0] | 0;
                        yn = inp[((ystart + width) | 0) >> 0] | 0;

                        u = inp[ustart >> 0] | 0;
                        v = inp[vstart >> 0] | 0;

                        cacheAdr = (((((y << 16) | 0) + ((u << 8) | 0)) | 0) + v) | 0;
                        o = mem32[((cacheStart + cacheAdr) | 0) >> 2] | 0;
                        if (o) {
                        } else {
                            o = yuv2rgbcalc(y, u, v) | 0;
                            mem32[((cacheStart + cacheAdr) | 0) >> 2] = o | 0;
                        }
                        ;
                        mem32[ostart >> 2] = o;

                        cacheAdr = (((((yn << 16) | 0) + ((u << 8) | 0)) | 0) + v) | 0;
                        o = mem32[((cacheStart + cacheAdr) | 0) >> 2] | 0;
                        if (o) {
                        } else {
                            o = yuv2rgbcalc(yn, u, v) | 0;
                            mem32[((cacheStart + cacheAdr) | 0) >> 2] = o | 0;
                        }
                        ;
                        mem32[((ostart + widthFour) | 0) >> 2] = o;

                        //yuv2rgb5(y, u, v, ostart);
                        //yuv2rgb5(yn, u, v, (ostart + widthFour)|0);
                        ostart = (ostart + 4) | 0;

                        // next step only for y. u and v stay the same
                        ystart = (ystart + 1) | 0;
                        y = inp[ystart >> 0] | 0;
                        yn = inp[((ystart + width) | 0) >> 0] | 0;

                        //yuv2rgb5(y, u, v, ostart);
                        cacheAdr = (((((y << 16) | 0) + ((u << 8) | 0)) | 0) + v) | 0;
                        o = mem32[((cacheStart + cacheAdr) | 0) >> 2] | 0;
                        if (o) {
                        } else {
                            o = yuv2rgbcalc(y, u, v) | 0;
                            mem32[((cacheStart + cacheAdr) | 0) >> 2] = o | 0;
                        }
                        ;
                        mem32[ostart >> 2] = o;

                        //yuv2rgb5(yn, u, v, (ostart + widthFour)|0);
                        cacheAdr = (((((yn << 16) | 0) + ((u << 8) | 0)) | 0) + v) | 0;
                        o = mem32[((cacheStart + cacheAdr) | 0) >> 2] | 0;
                        if (o) {
                        } else {
                            o = yuv2rgbcalc(yn, u, v) | 0;
                            mem32[((cacheStart + cacheAdr) | 0) >> 2] = o | 0;
                        }
                        ;
                        mem32[((ostart + widthFour) | 0) >> 2] = o;
                        ostart = (ostart + 4) | 0;

                        //all positions inc 1

                        ystart = (ystart + 1) | 0;
                        ustart = (ustart + 1) | 0;
                        vstart = (vstart + 1) | 0;
                    }
                    ;
                    ostart = (ostart + widthFour) | 0;
                    ystart = (ystart + width) | 0;

                }
                ;

            };

            function yuv2rgbcalc(y, u, v) {
                y = y | 0;
                u = u | 0;
                v = v | 0;

                var r = 0;
                var g = 0;
                var b = 0;

                var o = 0;

                var a0 = 0;
                var a1 = 0;
                var a2 = 0;
                var a3 = 0;
                var a4 = 0;

                a0 = imul(1192, (y - 16) | 0) | 0;
                a1 = imul(1634, (v - 128) | 0) | 0;
                a2 = imul(832, (v - 128) | 0) | 0;
                a3 = imul(400, (u - 128) | 0) | 0;
                a4 = imul(2066, (u - 128) | 0) | 0;

                r = (((a0 + a1) | 0) >> 10) | 0;
                g = (((((a0 - a2) | 0) - a3) | 0) >> 10) | 0;
                b = (((a0 + a4) | 0) >> 10) | 0;

                if ((((r & 255) | 0) != (r | 0)) | 0) {
                    r = min(255, max(0, r | 0) | 0) | 0;
                }
                ;
                if ((((g & 255) | 0) != (g | 0)) | 0) {
                    g = min(255, max(0, g | 0) | 0) | 0;
                }
                ;
                if ((((b & 255) | 0) != (b | 0)) | 0) {
                    b = min(255, max(0, b | 0) | 0) | 0;
                }
                ;

                o = 255;
                o = (o << 8) | 0;
                o = (o + b) | 0;
                o = (o << 8) | 0;
                o = (o + g) | 0;
                o = (o << 8) | 0;
                o = (o + r) | 0;

                return o | 0;

            };


            return {
                init: init,
                doit: doit
            };
        };


        /*
         potential worker initialization

         */


        if (typeof self != "undefined") {
            var isWorker = false;
            var decoder;
            var reuseMemory = false;
            var sliceMode = false;
            var sliceNum = 0;
            var sliceCnt = 0;
            var lastSliceNum = 0;
            var sliceInfoAr;
            var lastBuf;
            var awaiting = 0;
            var pile = [];
            var startDecoding;
            var finishDecoding;
            var timeDecoding;

            var memAr = [];
            var getMem = function (length) {
                if (memAr.length) {
                    var u = memAr.shift();
                    while (u && u.byteLength !== length) {
                        u = memAr.shift();
                    }
                    ;
                    if (u) {
                        return u;
                    }
                    ;
                }
                ;
                return new ArrayBuffer(length);
            };

            var copySlice = function (source, target, infoAr, width, height) {

                var length = width * height;
                var length4 = length / 4
                var plane2 = length;
                var plane3 = length + length4;

                var copy16 = function (parBegin, parEnd) {
                    var i = 0;
                    for (i = 0; i < 16; ++i) {
                        var begin = parBegin + (width * i);
                        var end = parEnd + (width * i)
                        target.set(source.subarray(begin, end), begin);
                    }
                    ;
                };
                var copy8 = function (parBegin, parEnd) {
                    var i = 0;
                    for (i = 0; i < 8; ++i) {
                        var begin = parBegin + ((width / 2) * i);
                        var end = parEnd + ((width / 2) * i)
                        target.set(source.subarray(begin, end), begin);
                    }
                    ;
                };
                var copyChunk = function (begin, end) {
                    target.set(source.subarray(begin, end), begin);
                };

                var begin = infoAr[0];
                var end = infoAr[1];
                if (end > 0) {
                    copy16(begin, end);
                    copy8(infoAr[2], infoAr[3]);
                    copy8(infoAr[4], infoAr[5]);
                }
                ;
                begin = infoAr[6];
                end = infoAr[7];
                if (end > 0) {
                    copy16(begin, end);
                    copy8(infoAr[8], infoAr[9]);
                    copy8(infoAr[10], infoAr[11]);
                }
                ;

                begin = infoAr[12];
                end = infoAr[15];
                if (end > 0) {
                    copyChunk(begin, end);
                    copyChunk(infoAr[13], infoAr[16]);
                    copyChunk(infoAr[14], infoAr[17]);
                }
                ;

            };

            var sliceMsgFun = function () {
            };

            var setSliceCnt = function (parSliceCnt) {
                sliceCnt = parSliceCnt;
                lastSliceNum = sliceCnt - 1;
            };


            self.addEventListener('message', function (e) {

                if (isWorker) {
                    if (reuseMemory) {
                        if (e.data.reuse) {
                            memAr.push(e.data.reuse);
                        }
                        ;
                    }
                    ;
                    if (e.data.buf) {
                        if (sliceMode && awaiting !== 0) {
                            pile.push(e.data);
                        } else {
                            decoder.decode(
                                new Uint8Array(e.data.buf, e.data.offset || 0, e.data.length),
                                e.data.info,
                                function () {
                                    if (sliceMode && sliceNum !== lastSliceNum) {
                                        postMessage(e.data, [e.data.buf]);
                                    }
                                    ;
                                }
                            );
                        }
                        ;
                        return;
                    }
                    ;

                    if (e.data.slice) {
                        // update ref pic
                        var copyStart = nowValue();
                        copySlice(new Uint8Array(e.data.slice), lastBuf, e.data.infos[0].sliceInfoAr, e.data.width, e.data.height);
                        // is it the one? then we need to update it
                        if (e.data.theOne) {
                            copySlice(lastBuf, new Uint8Array(e.data.slice), sliceInfoAr, e.data.width, e.data.height);
                            if (timeDecoding > e.data.infos[0].timeDecoding) {
                                e.data.infos[0].timeDecoding = timeDecoding;
                            }
                            ;
                            e.data.infos[0].timeCopy += (nowValue() - copyStart);
                        }
                        ;
                        // move on
                        postMessage(e.data, [e.data.slice]);

                        // next frame in the pipe?
                        awaiting -= 1;
                        if (awaiting === 0 && pile.length) {
                            var data = pile.shift();
                            decoder.decode(
                                new Uint8Array(data.buf, data.offset || 0, data.length),
                                data.info,
                                function () {
                                    if (sliceMode && sliceNum !== lastSliceNum) {
                                        postMessage(data, [data.buf]);
                                    }
                                    ;
                                }
                            );
                        }
                        ;
                        return;
                    }
                    ;

                    if (e.data.setSliceCnt) {
                        setSliceCnt(e.data.sliceCnt);
                        return;
                    }
                    ;

                } else {
                    if (e.data && e.data.type === "Broadway.js - Worker init") {
                        isWorker = true;
                        decoder = new Decoder(e.data.options);

                        if (e.data.options.sliceMode) {
                            reuseMemory = true;
                            sliceMode = true;
                            sliceNum = e.data.options.sliceNum;
                            setSliceCnt(e.data.options.sliceCnt);

                            decoder.onPictureDecoded = function (buffer, width, height, infos) {

                                // buffer needs to be copied because we give up ownership
                                var copyU8 = new Uint8Array(getMem(buffer.length));
                                copySlice(buffer, copyU8, infos[0].sliceInfoAr, width, height);

                                startDecoding = infos[0].startDecoding;
                                finishDecoding = infos[0].finishDecoding;
                                timeDecoding = finishDecoding - startDecoding;
                                infos[0].timeDecoding = timeDecoding;
                                infos[0].timeCopy = 0;

                                postMessage({
                                    slice: copyU8.buffer,
                                    sliceNum: sliceNum,
                                    width: width,
                                    height: height,
                                    infos: infos
                                }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership

                                awaiting = sliceCnt - 1;

                                lastBuf = buffer;
                                sliceInfoAr = infos[0].sliceInfoAr;

                            };

                        } else if (e.data.options.reuseMemory) {
                            reuseMemory = true;
                            decoder.onPictureDecoded = function (buffer, width, height, infos) {

                                // buffer needs to be copied because we give up ownership
                                var copyU8 = new Uint8Array(getMem(buffer.length));
                                copyU8.set(buffer, 0, buffer.length);

                                postMessage({
                                    buf: copyU8.buffer,
                                    length: buffer.length,
                                    width: width,
                                    height: height,
                                    infos: infos
                                }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership

                            };

                        } else {
                            decoder.onPictureDecoded = function (buffer, width, height, infos) {
                                if (buffer) {
                                    buffer = new Uint8Array(buffer);
                                }
                                ;

                                // buffer needs to be copied because we give up ownership
                                var copyU8 = new Uint8Array(buffer.length);
                                copyU8.set(buffer, 0, buffer.length);

                                postMessage({
                                    buf: copyU8.buffer,
                                    length: buffer.length,
                                    width: width,
                                    height: height,
                                    infos: infos
                                }, [copyU8.buffer]); // 2nd parameter is used to indicate transfer of ownership

                            };
                        }
                        ;
                        postMessage({consoleLog: "broadway worker initialized"});
                    }
                    ;
                }
                ;


            }, false);
        }
        ;

        Decoder.nowValue = nowValue;

        return Decoder;

    })();


}));

